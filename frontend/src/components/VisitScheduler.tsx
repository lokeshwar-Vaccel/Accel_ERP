import React, { useState, useEffect } from 'react';
import { 
  Calendar, 
  Clock, 
  User, 
  MapPin, 
  FileText, 
  Settings,
  Plus,
  X,
  CheckCircle,
  AlertTriangle,
  CalendarDays,
  Users,
  Edit3,
  Trash2
} from 'lucide-react';
import { apiClient } from '../utils/api';
import toast from 'react-hot-toast';

interface VisitSchedulerProps {
  isOpen: boolean;
  onClose: () => void;
  amcId: string;
  amcData?: any;
  onSuccess?: () => void; // Add callback for successful scheduling
}

interface ScheduledVisit {
  id: string;
  scheduledDate: string;
  assignedTo: string;
  status?: string;
  _id?: string; // For existing visits
}

interface User {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  role: string;
}

const VisitScheduler: React.FC<VisitSchedulerProps> = ({ isOpen, onClose, amcId, amcData, onSuccess }) => {
  const [scheduledVisits, setScheduledVisits] = useState<ScheduledVisit[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [autoGenerated, setAutoGenerated] = useState(false);
  const [hasExistingVisits, setHasExistingVisits] = useState(false);

  useEffect(() => {
    if (isOpen) {
      fetchUsers();
      loadExistingVisits();
    }
  }, [isOpen, amcData]);

  const fetchUsers = async () => {
    setLoading(true);
    try {
      console.log('Fetching field engineers...');
      // Try to get field engineers first, fallback to all users
      let response;
      try {
        response = await apiClient.users.getFieldEngineers();
        console.log('Field engineers API response:', response);
        
        if (response.success && response.data && Array.isArray(response.data.fieldEngineers)) {
          console.log('Setting field engineers:', response.data.fieldEngineers);
          setUsers(response.data.fieldEngineers);
          return;
        }
      } catch (fieldEngineersError) {
        console.log('Field engineers API failed, trying getAll:', fieldEngineersError);
      }
      
      // Fallback to getAll users
      response = await apiClient.users.getAll();
      console.log('Users API response:', response);
      
      if (response.success && Array.isArray(response.data)) {
        console.log('Setting users:', response.data);
        setUsers(response.data);
      } else if (response.success && response.data && typeof response.data === 'object' && Array.isArray((response.data as any).users)) {
        console.log('Setting users from data.users:', (response.data as any).users);
        setUsers((response.data as any).users);
      } else {
        console.log('No valid users data found, setting empty array');
        setUsers([]);
      }
    } catch (error) {
      console.error('Error fetching users:', error);
      setUsers([]);
    } finally {
      setLoading(false);
    }
  };

  const loadExistingVisits = () => {
    console.log('loadExistingVisits called with amcData:', amcData);
    
    if (!amcData || !amcData.visitSchedule) {
      console.log('No amcData or visitSchedule found, generating auto schedule');
      // No existing visits, generate auto schedule
      if (!autoGenerated) {
        generateAutoSchedule();
      }
      return;
    }

    // Check if there are existing visits with assigned engineers
    const existingVisits = amcData.visitSchedule || [];
    console.log('Existing visits found:', existingVisits);

    if (existingVisits.length > 0) {
      // Convert existing visits to the format expected by the component
      const formattedVisits: ScheduledVisit[] = existingVisits.map((visit: any, index: number) => {
        console.log('Processing visit:', visit);
        
        const formattedVisit = {
          id: visit._id || `existing-visit-${index}`,
          _id: visit._id, // Keep the original _id for existing visits
          scheduledDate: visit.scheduledDate ? new Date(visit.scheduledDate).toISOString().split('T')[0] : '',
          assignedTo: visit.assignedTo ? (typeof visit.assignedTo === 'string' ? visit.assignedTo : visit.assignedTo._id) : '',
          status: visit.status || 'pending'
        };
        
        console.log('Formatted visit:', formattedVisit);
        return formattedVisit;
      });

      console.log('Formatted existing visits:', formattedVisits);
      setScheduledVisits(formattedVisits);
      setHasExistingVisits(true);
      setAutoGenerated(true); // Prevent auto-generation when we have existing visits
    } else {
      console.log('No existing visits found, generating auto schedule');
      // No existing visits, generate auto schedule
      if (!autoGenerated) {
        generateAutoSchedule();
      }
    }
  };

  const generateAutoSchedule = () => {
    if (!amcData) return;

    const startDate = new Date(amcData.amcStartDate || amcData.startDate);
    const endDate = new Date(amcData.amcEndDate || amcData.endDate);
    const numberOfVisits = amcData.numberOfVisits || amcData.scheduledVisits || 4;
    
    // Calculate the interval in months based on contract duration and number of visits
    const totalMonths = (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
                       (endDate.getMonth() - startDate.getMonth());
    const intervalMonths = Math.floor(totalMonths / numberOfVisits);
    
    const visits: ScheduledVisit[] = [];
    
    for (let i = 0; i < numberOfVisits; i++) {
      const visitDate = new Date(startDate);
      // Schedule visits with proper interval (first visit after interval, not on start date)
      visitDate.setMonth(startDate.getMonth() + ((i + 1) * intervalMonths));
      
      visits.push({
        id: `visit-${i + 1}`,
        scheduledDate: visitDate.toISOString().split('T')[0],
        assignedTo: ''
      });
    }

    setScheduledVisits(visits);
    setAutoGenerated(true);
    setHasExistingVisits(false);
  };

  const updateVisit = (id: string, field: keyof ScheduledVisit, value: any) => {
    setScheduledVisits(prev => 
      prev.map(visit => 
        visit.id === id ? { ...visit, [field]: value } : visit
      )
    );
  };

  const removeVisit = (id: string) => {
    setScheduledVisits(prev => prev.filter(visit => visit.id !== id));
  };

  const addVisit = () => {
    const newVisit: ScheduledVisit = {
      id: `visit-${Date.now()}`,
      scheduledDate: '',
      assignedTo: ''
    };
    setScheduledVisits(prev => [...prev, newVisit]);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubmitting(true);
    setError('');

    try {
      // Validate that all visits have required fields
      const invalidVisits = scheduledVisits.filter(visit => 
        !visit.scheduledDate || !visit.assignedTo
      );

      if (invalidVisits.length > 0) {
        setError('Please fill in all required fields for all visits');
        setSubmitting(false);
        return;
      }

      // Prepare visits data for bulk submission
      const visitsData = scheduledVisits.map(visit => ({
        scheduledDate: visit.scheduledDate,
        assignedTo: visit.assignedTo,
        visitType: 'routine' // Default to routine
      }));

      // Submit all visits in a single API call
      await apiClient.amc.scheduleVisitsBulk(amcId, visitsData);

      // Show success message
      toast.success(`${scheduledVisits.length} visit(s) scheduled successfully!`);

      // Call the success callback to refresh AMC data
      if (onSuccess) {
        try {
          onSuccess();
        } catch (error) {
          console.error('Error refreshing AMC data:', error);
          toast.error('Visits scheduled but failed to refresh data. Please refresh the page.');
        }
      }

      onClose();
      // You might want to trigger a refresh of the AMC data here
    } catch (error: any) {
      setError(error.message || 'Failed to schedule visits');
    } finally {
      setSubmitting(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-IN', {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getUserName = (userId: string) => {
    const user = users.find(u => u._id === userId);
    return user ? `${user.firstName} ${user.lastName}` : 'Not assigned';
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl shadow-xl w-full max-w-6xl m-4 max-h-[90vh] overflow-hidden flex flex-col">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">Schedule Visits</h2>
            <p className="text-gray-600">
              {hasExistingVisits 
                ? `Manage ${scheduledVisits.length} existing visits for AMC contract`
                : `Schedule ${amcData?.numberOfVisits || amcData?.scheduledVisits || 0} visits for AMC contract`
              }
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <div className="flex-1 overflow-y-auto p-6">
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <AlertTriangle className="w-5 h-5 text-red-400 mr-2" />
                <span className="text-red-800">{error}</span>
              </div>
            </div>
          )}

          {/* Schedule Info */}
          <div className={`border rounded-lg p-4 mb-6 ${
            hasExistingVisits 
              ? 'bg-green-50 border-green-200' 
              : 'bg-blue-50 border-blue-200'
          }`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                {hasExistingVisits ? (
                  <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                ) : (
                  <CalendarDays className="w-5 h-5 text-blue-600 mr-2" />
                )}
                <div>
                  <h3 className={`text-sm font-medium ${
                    hasExistingVisits ? 'text-green-900' : 'text-blue-900'
                  }`}>
                    {hasExistingVisits ? 'Existing Visit Schedule' : 'Auto-Generated Schedule'}
                  </h3>
                  <p className={`text-xs ${
                    hasExistingVisits ? 'text-green-700' : 'text-blue-700'
                  }`}>
                    {hasExistingVisits 
                      ? `${scheduledVisits.length} visits already scheduled from ${
                          formatDate(amcData?.amcStartDate || amcData?.startDate)
                        } to ${
                          formatDate(amcData?.amcEndDate || amcData?.endDate)
                        }`
                      : `${amcData?.numberOfVisits || amcData?.scheduledVisits || 0} visits automatically scheduled from ${
                          formatDate(amcData?.amcStartDate || amcData?.startDate)
                        } to ${
                          formatDate(amcData?.amcEndDate || amcData?.endDate)
                        }`
                    }
                  </p>
                </div>
              </div>
              {!hasExistingVisits && (
                <button
                  type="button"
                  onClick={generateAutoSchedule}
                  className="px-3 py-1 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700"
                >
                  Regenerate
                </button>
              )}
            </div>
          </div>

          {/* Visits List */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-gray-900">
                {hasExistingVisits ? 'Existing Visits' : 'Scheduled Visits'}
              </h3>
              <button
                type="button"
                onClick={addVisit}
                className="px-3 py-1 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 flex items-center space-x-1"
              >
                <Plus className="w-4 h-4" />
                <span>Add Visit</span>
              </button>
            </div>

            {scheduledVisits.map((visit, index) => (
              <div key={visit.id} className={`border rounded-lg p-4 ${
                visit._id ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'
              }`}>
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                      visit._id 
                        ? 'bg-green-100 text-green-600' 
                        : 'bg-blue-100 text-blue-600'
                    }`}>
                      {index + 1}
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-gray-900">
                        Visit {index + 1}
                        {visit._id && (
                          <span className="ml-2 text-xs text-green-600 font-normal">
                            (Existing)
                          </span>
                        )}
                      </h4>
                      {visit.status && (
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          visit.status === 'completed' 
                            ? 'bg-green-100 text-green-800'
                            : visit.status === 'pending'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-red-100 text-red-800'
                        }`}>
                          {visit.status}
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {visit._id && visit.status === 'pending' && (
                      <button
                        type="button"
                        onClick={() => {
                          // This will be handled by the parent component
                          if (onSuccess) {
                            // For now, we'll just show a message that this should be done from the main AMC page
                            alert('To complete this visit, please use the "Complete Visit" button in the AMC details page.');
                          }
                        }}
                        className="text-green-600 hover:text-green-800 p-1"
                        title="Complete visit"
                      >
                        <CheckCircle className="w-4 h-4" />
                      </button>
                    )}
                    <button
                      type="button"
                      onClick={() => removeVisit(visit.id)}
                      className="text-red-600 hover:text-red-800 p-1"
                      title="Remove visit"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {/* Left Side - Date */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Scheduled Date *
                    </label>
                    <input
                      type="date"
                      required
                      value={visit.scheduledDate}
                      onChange={(e) => updateVisit(visit.id, 'scheduledDate', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  {/* Right Side - Operator Assignment */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Assigned Engineer *
                    </label>
                    <select
                      required
                      value={visit.assignedTo}
                      onChange={(e) => updateVisit(visit.id, 'assignedTo', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      disabled={loading}
                    >
                      <option value="">
                        {loading ? 'Loading engineers...' : 'Select Engineer'}
                      </option>
                      {!loading && users.map((user) => (
                        <option key={user._id} value={user._id}>
                          {user.firstName} {user.lastName}
                        </option>
                      ))}
                    </select>
                    {visit.assignedTo && (
                      <p className="text-xs text-gray-600 mt-1">
                        Currently assigned: {getUserName(visit.assignedTo)}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}

            {scheduledVisits.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <Calendar className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                <p>No visits scheduled yet. Click "Add Visit" to create a new visit.</p>
              </div>
            )}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-between items-center p-6 border-t border-gray-200">
          <div className="text-sm text-gray-600">
            {scheduledVisits.length} visit{scheduledVisits.length !== 1 ? 's' : ''} scheduled
            {hasExistingVisits && (
              <span className="ml-2 text-green-600">
                ({scheduledVisits.filter(v => v._id).length} existing)
              </span>
            )}
          </div>
          <div className="flex space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="button"
              onClick={handleSubmit}
              disabled={submitting || scheduledVisits.length === 0}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center space-x-2"
            >
              {submitting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Scheduling...</span>
                </>
              ) : (
                <>
                  <Calendar className="w-4 h-4" />
                  <span>
                    {hasExistingVisits ? 'Update' : 'Schedule'} {scheduledVisits.length} Visit{scheduledVisits.length !== 1 ? 's' : ''}
                  </span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VisitScheduler; 