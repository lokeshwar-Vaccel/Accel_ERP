            {/* Location and Customer Information */}
            <div className="mb-8">
              <h2 className="text-lg font-semibold mb-4">Location and Customer Information</h2>
              
              {/* Customer and Basic Info */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    From Location *
                  </label>
                  <div className="relative dropdown-container">
                    <input
                      type="text"
                      value={locationSearchTerm || getLocationLabel(formData.location || '')}
                      onChange={(e) => {
                        setLocationSearchTerm(e.target.value);
                        if (!showLocationDropdown) setShowLocationDropdown(true);
                        setHighlightedLocationIndex(-1);
                      }}
                      onFocus={() => {
                        setShowLocationDropdown(true);
                        setHighlightedLocationIndex(-1);
                      }}
                      autoComplete="off"
                      onKeyDown={handleLocationKeyDown}
                      placeholder="Search location or press ↓ to open"
                      className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                    />
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <ChevronDown className={`w-4 h-4 text-gray-400 transition-transform ${showLocationDropdown ? 'rotate-180' : ''}`} />
                    </div>
                    {showLocationDropdown && (
                      <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-50 py-0.5 max-h-60 overflow-y-auto">
                        <div className="px-3 py-2 text-center text-xs text-gray-500 bg-gray-50 border-b border-gray-200">
                          <kbd className="px-1 py-0.5 bg-gray-200 rounded text-xs">↑↓</kbd> Navigate •
                          <kbd className="px-1 py-0.5 bg-gray-200 rounded text-xs ml-1">Enter/Tab</kbd> Select •
                          <kbd className="px-1 py-0.5 bg-gray-200 rounded text-xs ml-1">Esc</kbd> Close
                        </div>
                        <button
                          onClick={() => {
                            console.log('Selecting location:', (location as any)._id);
                            setFormData(prev => ({ ...prev, location: (location as any)._id }));
                            setShowLocationDropdown(false);
                            setLocationSearchTerm('');
                            setHighlightedLocationIndex(-1);
                          }}
                          className={`w-full px-3 py-2 text-left hover:bg-gray-50 transition-colors text-sm ${!formData.location ? 'bg-blue-50 text-blue-600' : 'text-gray-700'}`}
                        >
                          Select location
                        </button>
                        {Array.isArray(locations) && locations
                          .filter(location =>
                            (location as any).name.toLowerCase().includes(locationSearchTerm.toLowerCase()) ||
                            (location as any).type.toLowerCase().includes(locationSearchTerm.toLowerCase())
                          )
                          .map((location, index) => (
                          <button
                            key={(location as any)._id}
                            onClick={() => {
                              console.log('Selecting location:', (location as any)._id);
                              setFormData(prev => ({ ...prev, location: (location as any)._id }));
                              setShowLocationDropdown(false);
                              setLocationSearchTerm('');
                              setHighlightedLocationIndex(-1);
                            }}
                            className={`w-full px-3 py-2 text-left transition-colors text-sm ${formData.location === (location as any)._id ? 'bg-blue-100 text-blue-800' :
                              highlightedLocationIndex === index ? 'bg-blue-200 text-blue-900 border-l-4 border-l-blue-600' :
                                'text-gray-700 hover:bg-gray-50'
                              }`}
                          >
                            <div>
                              <div className="font-medium">{(location as any).name}</div>
                              <div className="text-xs text-gray-500 capitalize">{(location as any).type.replace('_', ' ')}</div>
                            </div>
                          </button>
                        ))}
                        {Array.isArray(locations) && locations.filter(location =>
                          (location as any).name.toLowerCase().includes(locationSearchTerm.toLowerCase()) ||
                          (location as any).type.toLowerCase().includes(locationSearchTerm.toLowerCase())
                        ).length === 0 && locationSearchTerm && (
                          <div className="px-3 py-2 text-sm text-gray-500 text-center">
                            No locations found for "{locationSearchTerm}"
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Customer *
                  </label>
                  <div className="relative dropdown-container">
                    <input
                      type="text"
                      value={customerSearchTerm || getCustomerLabel(formData.customer._id || '')}
                      onChange={(e) => {
                        setCustomerSearchTerm(e.target.value);
                        if (!showCustomerDropdown) setShowCustomerDropdown(true);
                        setHighlightedCustomerIndex(-1);
                      }}
                      onFocus={() => {
                        setShowCustomerDropdown(true);
                        setHighlightedCustomerIndex(-1);
                      }}
                      onKeyDown={handleCustomerKeyDown}
                      placeholder="Search customer or press ↓ to open"
                      className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                    />
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <ChevronDown className={`w-4 h-4 text-gray-400 transition-transform ${showCustomerDropdown ? 'rotate-180' : ''}`} />
                    </div>
                    {showCustomerDropdown && (
                      <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-50 py-0.5 max-h-60 overflow-y-auto">
                        <div className="px-3 py-2 text-center text-xs text-gray-500 bg-gray-50 border-b border-gray-200">
                          <kbd className="px-1 py-0.5 bg-gray-200 rounded text-xs">↑↓</kbd> Navigate •
                          <kbd className="px-1 py-0.5 bg-gray-200 rounded text-xs ml-1">Enter/Tab</kbd> Select •
                          <kbd className="px-1 py-0.5 bg-gray-200 rounded text-xs ml-1">Esc</kbd> Close
                        </div>
                        <button
                          onClick={() => {
                            setFormData(prev => ({
                              ...prev,
                              customer: { _id: '', name: '', email: '', phone: '', pan: '', corporateName: '', address: '', pinCode: '', tehsil: '', district: '' }
                            }));
                            setShowCustomerDropdown(false);
                            setCustomerSearchTerm('');
                            setAddresses([]);
                          }}
                          className={`w-full px-3 py-2 text-left hover:bg-gray-50 transition-colors text-sm ${!formData.customer._id ? 'bg-blue-50 text-blue-600' : 'text-gray-700'}`}
                        >
                          Select customer
                        </button>
                        {customers
                          .filter(customer =>
                            customer.type === 'customer' && (
                              customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
                              customer.email?.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
                              customer.phone?.toLowerCase().includes(customerSearchTerm.toLowerCase())
                            )
                          )
                          .map((customer, index) => (
                          <button
                            key={customer._id}
                            onClick={() => {
                              handleCustomerSelect(customer._id);
                              setCustomerSearchTerm('');
                              setHighlightedCustomerIndex(-1);
                              setAddresses(customer.addresses || []);
                            }}
                            className={`w-full px-3 py-2 text-left transition-colors text-sm ${formData.customer._id === customer._id ? 'bg-blue-100 text-blue-800' :
                              highlightedCustomerIndex === index ? 'bg-blue-200 text-blue-900 border-l-4 border-l-blue-600' :
                                'text-gray-700 hover:bg-gray-50'
                              }`}
                          >
                            <div>
                              <div className="font-medium">{customer.name}</div>
                              <div className="text-xs text-gray-500">{customer.email}</div>
                            </div>
                          </button>
                        ))}
                        {customers.filter(customer =>
                          customer.type === 'customer' && (
                            customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
                            customer.email?.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
                            customer.phone?.toLowerCase().includes(customerSearchTerm.toLowerCase())
                          )
                        ).length === 0 && customerSearchTerm && (
                          <div className="px-3 py-2 text-sm text-gray-500 text-center">
                            No customers found for "{customerSearchTerm}"
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
